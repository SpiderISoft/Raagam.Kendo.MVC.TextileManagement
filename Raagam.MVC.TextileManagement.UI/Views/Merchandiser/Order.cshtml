@model Raagam.TextileManagement.Model.OrderMainModel 

@{
    ViewBag.Title = "Order";
    Layout = null;  
}

 
<script language="javascript" type="text/javascript">

    $(document).ready(function (e) {
        $.lastSelectedRow = null;


        $('#OrderNumber').inputmask('999999', { placeholder: " " });
        $('#OrderDate').inputmask('dd/mm/yyyy', { clearIncomplete: true });
        $('#DeliveryDate').inputmask('dd/mm/yyyy', { clearIncomplete: true });
        $('#ExcessPercentage').inputmask('99', { placeholder: " " });
        $('#DeliveryDate').datepicker({ dateFormat: 'dd/mm/yy', changeMonth: true, minDate: 0,
            changeYear: true
        });

        $('#grdOrder').jqGrid({
            height: 'auto',
            datatype: 'local',
            rowNum: 10,
            caption: 'Order',
            viewrecords: true,
            colNames: ['StyleColorSequence', 'ColorName'],
            colModel: [{
                name: 'StyleColorSequence',
                index: 'StyleColorSequence',
                hidden: true
            },
                   {
                       name: 'ColorName',
                       index: 'ColorName'
                   }
                 ],
            cellEdit: true
        });

        jQuery("#grdOrder").jqGrid('navGrid', '#Pager', { edit: true, add: false, del: false }, null, null, true, { multipleSearch: true });

        $('#ExcessPercentage').keyup(function (event) {
            var ExcessPercentage = parseInt($('#ExcessPercentage').val());

            if ((ExcessPercentage == null) || (ExcessPercentage == '')) {
                ExcessPercentage = 0;
            }

            var TotalQuantity = parseInt($('#OrderQuantity').val());

            if ((TotalQuantity == null) || (TotalQuantity == '')) {
                TotalQuantity = 0;
            }

            ExcessQuantity = Math.floor(TotalQuantity + (TotalQuantity * (ExcessPercentage / 100)));
            $('#ExcessQuantity').val(ExcessQuantity);
        });

        $('#OrderNumber').keypress(function (e) {


            if (e.keyCode == 13) {


                var OrderNumber = $('#OrderNumber').val();

                if ((OrderNumber == null) || (OrderNumber == 0) || OrderNumber == '') {
                    alert('Please Enter OrderNumbber');
                    return false;
                }


                $.ajax({
                    url: '@Url.Content("/Order/GetOrderDetails")',
                    type: 'POST',
                    data:
                        {
                            OrderNumber: OrderNumber
                        },
                    success: function (result) {

                        $('#Mode').val(result.data.Mode);

                        if (result.data.OrderNumber == 0) {
                            $('#frmOrder')[0].reset();
                            $('#Mode').val('New');
                            alert('Order Not Exists');
                        }

                        $('#OrderDate').val(result.data.OrderDate);
                        $('#DeliveryDate').val(result.data.DeliveryDate);
                        $('#BuyerReferenceNumber').val(result.data.BuyerReferenceNumber);
                        $('#BuyerSequenceNumber').val(result.data.BuyerSequenceNumber);

                        $('#OrderQuantity').val(result.data.OrderQuantity);
                        $('#ExcessPercentage').val(result.data.ExcessPercentage);
                        //$('#ExcessQuantity').val(result.data.ExcessQuantity);
                        $('#StyleSequenceNumber').val(result.data.StyleSequenceNumber);

                        $('#PackingType').val(result.data.PackingType);
                        $('#PackingInstructions').val(result.data.PackingInstructions);
                        $('#AssortmentDetails').val(result.data.AssortmentDetails);

                        $('#Comments').val(result.data.Comments);

                        $('#IsCompleted').attr('checked', result.data.IsCompleted);

                        var makeEditable = true;
                        if ($('#Mode').val() == 'Edit') {
                            if (result.data.IsCompleted == true) {
                                makeEditable = false;

                                $('#DeliveryDate').attr('readonly', 'readonly');
                                $('#BuyerReferenceNumber').attr('readonly', 'readonly');
                                $('#BuyerSequenceNumber').attr('readonly', 'readonly');
                                $('#ExcessPercentage').attr('readonly', 'readonly');
                                $('#StyleSequenceNumber').attr('readonly', 'readonly');
                                $('#PackingType').attr('readonly', 'readonly');
                                $('#PackingInstructions').attr('readonly', 'readonly');
                                $('#AssortmentDetails').attr('readonly', 'readonly');
                                $('#Comments').attr('readonly', 'readonly');
                                $('#IsCompleted').attr('readonly', 'readonly');
                                $('#IsCompleted').attr('disabled', 'disabled');
                                $('#SaveButton').attr('disabled', 'disabled');

                            }
                            else {
                                $('#DeliveryDate').removeAttr('readonly');
                                $('#BuyerReferenceNumber').removeAttr('readonly');
                                $('#BuyerSequenceNumber').removeAttr('readonly');
                                $('#ExcessPercentage').removeAttr('readonly');
                                $('#StyleSequenceNumber').removeAttr('readonly');
                                $('#PackingType').removeAttr('readonly');
                                $('#PackingInstructions').removeAttr('readonly');
                                $('#AssortmentDetails').removeAttr('readonly');
                                $('#Comments').removeAttr('readonly');
                                $('#IsCompleted').removeAttr('readonly');
                                $('#IsCompleted').removeAttr('disabled');
                                $('#SaveButton').removeAttr('disabled');
                            }
                        }

                        jQGridBinding(result.data, makeEditable);

                        var iRow = 0;
                        var OrderDetailModelList = result.data.OrderDetailModelList;
                        var columnNames = $("#grdOrder").jqGrid('getGridParam', 'colModel');

                        $.each(OrderDetailModelList, function (key, data) {
                            debugger;
                            $.each(columnNames, function (key, colName) {
                                debugger;
                                if (colName.index == data.StyleSizeSequenceNumber) {
                                    $.each(result.data.styleColorList, function (key, colorData) {
                                        debugger;
                                        if (colorData.StyleColorSequence == data.StyleColorSequenceNumber)
                                            return false;
                                        else
                                            iRow += 1;
                                    });
                                    debugger;
                                    //$('#grdOrder').jqGrid("setCell", iRow, "SequenceNumber", data.SequenceNumber);
                                    $('#grdOrder').jqGrid("setCell", iRow, colName.name, data.OrderDetailQuantity);
                                    iRow = 0;
                                }
                            });
                        });


                        var ExcessPercentage = parseInt($('#ExcessPercentage').val());

                        if ((ExcessPercentage == null) || (ExcessPercentage == '')) {
                            ExcessPercentage = 0;
                        }

                        var TotalQuantity = parseInt($('#OrderQuantity').val());

                        if ((TotalQuantity == null) || (TotalQuantity == '')) {
                            TotalQuantity = 0;
                        }

                        ExcessQuantity = Math.floor(TotalQuantity + (TotalQuantity * (ExcessPercentage / 100)));
                        $('#ExcessQuantity').val(ExcessQuantity);

                    },
                    error: function (e) {
                        alert(e.responseText);
                    }
                });
                return false;
            }
        });


        $('#StyleSequenceNumber').change(function (event) {
            if ($('#Mode').val() == "Edit")
                return true;


            var StyleSequenceNumber = $('#StyleSequenceNumber').val();

            if ((StyleSequenceNumber == null) || (StyleSequenceNumber == 0)) {
                alert('Please Select Style');
                return false;
            }

            $.ajax({
                url: '@Url.Content("/Order/SelectOrderColorSize")',
                data:
                {
                    StyleSequenceNumber: StyleSequenceNumber
                },
                type: 'POST',
                success: function (result) {
                    if (result.success) {

                        var makeEditable = true;
                        if ($('#Mode').val() == 'Edit') {
                            if (result.data.IsCompleted == true) {
                                makeEditable = false;
                            }
                        }

                        jQGridBinding(result.data, makeEditable);


                    }
                    else {
                        alert(result.data);
                    }
                },
                error: function (e) {

                    alert(e.responseText);
                }
            });

        });


        jQGridBinding = function (data, makeGridEditable) {


            $("#grdOrder").jqGrid('GridUnload');

            var obj = jQuery.parseJSON(data.ColModel);
            var colN = data.ColNames;
            var colM = obj.DocumentElement.colModel;
            var lastSel;

            $('#grdOrder').jqGrid({
                height: 'auto',
                datatype: 'local',
                rowNum: 10,
                caption: 'Order',
                viewrecords: true,
                colNames: colN,
                colModel: colM,
                cellEdit: true,
                onSelectCell: function (currentSelectedRow) {
                    debugger;
                    if (currentSelectedRow && currentSelectedRow != $.lastSelectedRow) {
                        $('#grdOrder').jqGrid('saveRow', $.lastSelectedRow, false);
                        $.lastSelectedRow = currentSelectedRow;
                    }
                    //$('#grdOrder').jqGrid('editRow', $.lastSelectedRow, true);
                },
                afterEditCell: function (rowid, cellname, value, iRow, iCol) {
                    var inputControl = jQuery('#' + (iRow) + '_' + cellname);

                    inputControl.bind("keydown", function (e) {

                        if (e.keyCode === 13) {
                            var increment = e.shiftKey ? -1 : 1;
                            var colModel = $("#grdOrder")[0].p.colModel;
                            var lastRowInd = jQuery("#grdOrder").jqGrid("getGridParam", "reccount");
                            var columnNames = $("#grdOrder").jqGrid('getGridParam', 'colModel');
                            var iRCnt = 0;
                            var TotalQuantity = 0;
                            var ExcessQuantity = 0;
                            var ExcessPercentage = parseInt($('#ExcessPercentage').val());

                            if ((ExcessPercentage == null) || (ExcessPercentage == '')) {
                                ExcessPercentage = 0;
                            }

                            $.each(columnNames, function (key, colName) {
                                debugger;

                                if (colName.editable == true) {


                                    for (iRCnt = 0; iRCnt < lastRowInd; iRCnt++) {



                                        var Quantity = $('#grdOrder').jqGrid('getCell', iRCnt, colName.name);

                                        if ((Quantity != null) && (Quantity != '')) {
                                            TotalQuantity += parseInt(Quantity);
                                            ExcessQuantity = Math.floor(TotalQuantity + (TotalQuantity * (ExcessPercentage / 100)));
                                        }
                                        $('#OrderQuantity').val(TotalQuantity);
                                        $('#ExcessQuantity').val(ExcessQuantity);
                                    }
                                }
                            });

                            $('#grdOrder').jqGrid('nextCell', iRow, iCol);

                            if (colModel.length - 1 == iCol) {

                                if (iRow + increment == 0 || iRow + increment == lastRowInd + 1)
                                    return;
                                else {
                                    jQuery("#grdOrder").jqGrid("editCell", iRow + increment, 2, true);
                                }
                            }
                        }
                    });


                },

                cellsubmit: 'clientArray',
                rowNum: 10,
                rowList: [5, 10, 20, 50]

            }); //End of JQGrid




            var columnNames = $("#grdOrder").jqGrid('getGridParam', 'colModel');
            $.each(columnNames, function (key, colName) {
                if ((colName.editable == "true") && (makeGridEditable == true)) {
                    colName.editable = true;
                    colName.editoptions = { defaultValue: 0, size: 20, maxlength: 30, dataInit: function (elem) { $(elem).inputmask('99999999', { placeholder: "" }); } };
                }
            });

            jQuery('#grdOrder').clearGridData();
            var rowid = 0;
            $.each(data.styleColorList, function (key, data) {
                debugger;
                jQuery("#grdOrder").addRowData(rowid, data);
                rowid = rowid + 1;
            });

        }; //End of jQGridBinding


        function formOrderDetailModel() {

            var ruledetail = new Array();


            var columnProp;
            var columnNames = $("#grdOrder").jqGrid('getGridParam', 'colModel');
            var cRows = jQuery("#grdOrder").jqGrid("getGridParam", "reccount");
            var ExcessQuantity;
            var iRow;

            var ExcessPercentage = parseInt($('#ExcessPercentage').val());

            if ((ExcessPercentage == null) || (ExcessPercentage == '')) {
                ExcessPercentage = 0;
            }

            $.each(columnNames, function (key, colName) {

                //columnProp = $('#grdOrder').jqGrid('getColProp',   colName);
                if (colName.editable == true) {
                    for (iRow = 0; iRow < cRows; iRow++) {

                        ExcessQuantity = 0;

                        var Quantity = $('#grdOrder').jqGrid('getCell', iRow, colName.name);

                        if ((Quantity != null) && (Quantity != '')) {
                            ExcessQuantity = Math.floor(parseInt(Quantity) + (parseInt(Quantity) * (ExcessPercentage / 100)));
                        }
                        else {
                            Quantity = 0;
                        }

                        var State;
                        if ($('#Mode').val() == 'New') {
                            State = 'Added';
                        }
                        else {
                            State = 'Updated';
                        }

                        ruledetail.push({
                            SequenceNumber: parseInt(jQuery('#grdOrder').jqGrid('getCell', iRow, "SequenceNumber")),
                            OrderNumber: 0,
                            StyleSequenceNumber: parseInt($('#StyleSequenceNumber').val()),
                            StyleColorSequenceNumber: parseInt(jQuery('#grdOrder').jqGrid('getCell', iRow, "StyleColorSequence")),
                            StyleSizeSequenceNumber: parseInt(colName.index),
                            OrderDetailQuantity: parseInt(Quantity),
                            OrderDetailExcessQuantity: parseInt(ExcessQuantity),
                            State: State
                        });

                    }
                }
            });

            return ruledetail;

        }


        $('#SaveButton').click(function (event) {
            debugger;

            var orderData = JSON.stringify({ 'orderMainModel': $('#frmOrder').jsonify(), 'orderDetailModel': formOrderDetailModel() });

            $.ajax({
                url: '@Url.Content("/Order/SaveOrder")',
                type: 'POST',
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                data: orderData,
                success: function (result) {
                    if (result.success) {
                        $('#OrderNumber').val(result.data.OrderNumber);
                        alert("Order Number " + result.data.OrderNumber + " Saved Successfully");
                    }
                    else {
                        alert(result.data);
                    }
                },
                error: function (e) {

                    alert(e.responseText);
                }
            });

        });


    });
</script>
<h2>Order</h2>
@using (Html.BeginForm(null, null, null, FormMethod.Post, new { id = "frmOrder", role = "form", @class = "form-horizontal" }))
{    
       @Html.HiddenFor(m => m.Mode)
    <div class="row">
        <div class="col-lg-12">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <h4>
                        <span>Order</span>
                    </h4>
                </div>
                <div class="panel-body">
                 <div class="form-group">
                        <div class="col-lg-offset-8">
                            <label class="checkbox-inline">
                            @Html.CheckBoxFor(m => m.IsCompleted)&nbsp;&nbsp;Completed
                            </label>
                            <input type="button" value="Save" id="SaveButton" class="btn marginR10" />
                            <button class="btn btn-danger" id="CancelButton">Cancel</button>
                          </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.OrderNumber, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.OrderNumber, new { @class = "form-control", style = "height:35px;width:200px;" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.OrderDate, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.OrderDate, new { @class = "form-control", style = "height:35px;width:200px;", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.DeliveryDate, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.DeliveryDate, new { @class = "form-control", style = "height:35px;width:200px;"})
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.BuyerReferenceNumber, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.BuyerReferenceNumber, new { @class = "form-control", style = "height:35px;width:200px;"  })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.BuyerSequenceNumber, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.DropDownListFor(m => m.BuyerSequenceNumber, Model.BuyerDropDownList,"Select Buyer" ,new { @class = "form-control", style = "height:35px;width:200px;" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExcessPercentage, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.ExcessPercentage, new { @class = "form-control", style = "height:35px;width:200px;"  })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.OrderQuantity, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.OrderQuantity, new { @class = "form-control", style = "height:35px;width:200px;", @readonly = "readonly" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(m => m.ExcessQuantity, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.ExcessQuantity, new { @class = "form-control", style = "height:35px;width:200px;", @readonly = "readonly" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.StyleSequenceNumber, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.DropDownListFor(m => m.StyleSequenceNumber, Model.StyleDropDownList,"Select Order", new { @class = "form-control", style = "height:35px;width:200px;" })
                        </div>
                    </div>
 
                    <div class="form-group">
                        <div class="col-lg-1">
                            <table id="grdOrder"></table>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(m => m.PackingType, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextBoxFor(m => m.PackingType , new { @class = "form-control", style = "height:35px;width: 400px;"  })
                        </div>
                    </div>

                     <div class="form-group">
                        @Html.LabelFor(m => m.PackingInstructions, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextAreaFor(m => m.PackingInstructions,5, 400, new { @class = "form-control" })
                        </div>
                    </div>
                    
                     <div class="form-group">
                        @Html.LabelFor(m => m.AssortmentDetails, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextAreaFor(m => m.AssortmentDetails, 5, 400, new { @class = "form-control" })
                        </div>
                    </div>
                                        
                     <div class="form-group">
                        @Html.LabelFor(m => m.Comments, new { @class = "col-lg-3 control-label", @for = "normalInput" })
                        <div class="col-lg-9">
                            @Html.TextAreaFor(m => m.Comments, 5, 400, new { @class = "form-control"  })
                        </div>
                    </div>
                    <!-- End .form-group  -->
                </div>
            </div>
            <!-- End .panel -->
        </div>
        <!-- End .span6 -->
    </div>
    <!-- End .row -->
    <!-- End .form-group  -->

}


